# Generated by Django 3.2.15 on 2022-10-26 17:39

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_athlete', models.BooleanField(default=False)),
                ('is_coach', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BoatType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[(None, 'Choose a boat'), ('1', 'k1'), ('2', 'k2'), ('3', 'k4'), ('4', 'c1'), ('5', 'c2'), ('6', 'c2'), ('7', "Va'a"), ('8', 'sup')], max_length=4, verbose_name='boat')),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('updated', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('slug', models.SlugField(unique=True, verbose_name='slug')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(1, 'Venue must be greater than 1 character')])),
            ],
        ),
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='coach.user')),
                ('name', models.CharField(max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(1, 'Name must be greater than 1 character')])),
                ('dob', models.DateField(null=True, verbose_name='D.O.B')),
                ('gender', models.CharField(blank=True, choices=[(None, 'Choose your gender'), ('0', 'male'), ('1', 'female'), ('3', 'other')], max_length=6, verbose_name='gender')),
                ('discipline', models.CharField(blank=True, choices=[(None, 'Choose your primary discipline'), ('0', 'kayak'), ('1', 'canoe'), ('2', 'sup')], max_length=6, verbose_name='discipline')),
                ('classification', models.CharField(blank=True, choices=[('0', 'able-bodied'), ('1', 'para-canoe')], max_length=12, verbose_name='classification')),
                ('club', models.CharField(blank=True, max_length=50, verbose_name='club')),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='coach.user')),
                ('name', models.CharField(max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(1, 'Name must be greater than 1 character')])),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(1, 'AthleteInitials-Date dd/mm/yyy- session')])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('crew', models.CharField(max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(1, 'Crew must be greater than 1 character')])),
                ('session_name', models.CharField(max_length=20, null=True)),
                ('session_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('boat', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='coach.boattype')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('venue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='coach.venue')),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coach.athlete')),
            ],
        ),
        migrations.CreateModel(
            name='Effort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.PositiveIntegerField(verbose_name='Distance(m)')),
                ('time', models.PositiveIntegerField(verbose_name='Time(s)')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coach.session')),
            ],
        ),
        migrations.CreateModel(
            name='Squads',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(1, 'Name must be greater than 1 character')])),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coach.athlete')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coach.coach')),
            ],
        ),
        migrations.AddField(
            model_name='athlete',
            name='coach',
            field=models.ManyToManyField(through='coach.Squads', to='coach.Coach'),
        ),
    ]
